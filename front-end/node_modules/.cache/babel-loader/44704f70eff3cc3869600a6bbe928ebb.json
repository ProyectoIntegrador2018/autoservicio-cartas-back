{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.cutStrByFullLength = exports.getStrFullLength = undefined;\n\nvar _tooltip = require('antd/lib/tooltip');\n\nvar _tooltip2 = _interopRequireDefault(_tooltip);\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar styles = {\n  'ellipsis': 'antd-pro-ellipsis-ellipsis',\n  'lines': 'antd-pro-ellipsis-lines',\n  'shadow': 'antd-pro-ellipsis-shadow',\n  'lineClamp': 'antd-pro-ellipsis-lineClamp'\n};\n/* eslint react/no-did-mount-set-state: 0 */\n\n/* eslint no-param-reassign: 0 */\n\nvar isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\nvar TooltipOverlayStyle = {\n  overflowWrap: 'break-word',\n  wordWrap: 'break-word'\n};\n\nvar getStrFullLength = exports.getStrFullLength = function getStrFullLength() {\n  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return str.split('').reduce(function (pre, cur) {\n    var charCode = cur.charCodeAt(0);\n\n    if (charCode >= 0 && charCode <= 128) {\n      return pre + 1;\n    }\n\n    return pre + 2;\n  }, 0);\n};\n\nvar cutStrByFullLength = exports.cutStrByFullLength = function cutStrByFullLength() {\n  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var maxLength = arguments[1];\n  var showLength = 0;\n  return str.split('').reduce(function (pre, cur) {\n    var charCode = cur.charCodeAt(0);\n\n    if (charCode >= 0 && charCode <= 128) {\n      showLength += 1;\n    } else {\n      showLength += 2;\n    }\n\n    if (showLength <= maxLength) {\n      return pre + cur;\n    }\n\n    return pre;\n  }, '');\n};\n\nvar getTooltip = function getTooltip(_ref) {\n  var tooltip = _ref.tooltip,\n      overlayStyle = _ref.overlayStyle,\n      title = _ref.title,\n      children = _ref.children;\n\n  if (tooltip) {\n    var props = tooltip === true ? {\n      overlayStyle: overlayStyle,\n      title: title\n    } : _extends({}, tooltip, {\n      overlayStyle: overlayStyle,\n      title: title\n    });\n    return _react2.default.createElement(_tooltip2.default, props, children);\n  }\n\n  return children;\n};\n\nvar EllipsisText = function EllipsisText(_ref2) {\n  var text = _ref2.text,\n      length = _ref2.length,\n      tooltip = _ref2.tooltip,\n      fullWidthRecognition = _ref2.fullWidthRecognition,\n      other = _objectWithoutProperties(_ref2, ['text', 'length', 'tooltip', 'fullWidthRecognition']);\n\n  if (typeof text !== 'string') {\n    throw new Error('Ellipsis children must be string.');\n  }\n\n  var textLength = fullWidthRecognition ? getStrFullLength(text) : text.length;\n\n  if (textLength <= length || length < 0) {\n    return _react2.default.createElement('span', other, text);\n  }\n\n  var tail = '...';\n  var displayText = void 0;\n\n  if (length - tail.length <= 0) {\n    displayText = '';\n  } else {\n    displayText = fullWidthRecognition ? cutStrByFullLength(text, length) : text.slice(0, length);\n  }\n\n  var spanAttrs = tooltip ? {} : _extends({}, other);\n  return getTooltip({\n    tooltip: tooltip,\n    overlayStyle: TooltipOverlayStyle,\n    title: text,\n    children: _react2.default.createElement('span', spanAttrs, displayText, tail)\n  });\n};\n\nvar Ellipsis = function (_Component) {\n  _inherits(Ellipsis, _Component);\n\n  function Ellipsis() {\n    var _ref3;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Ellipsis);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref3 = Ellipsis.__proto__ || Object.getPrototypeOf(Ellipsis)).call.apply(_ref3, [this].concat(args))), _this), _this.state = {\n      text: '',\n      targetCount: 0\n    }, _this.computeLine = function () {\n      var lines = _this.props.lines;\n\n      if (lines && !isSupportLineClamp) {\n        var text = _this.shadowChildren.innerText || _this.shadowChildren.textContent;\n        var lineHeight = parseInt(getComputedStyle(_this.root).lineHeight, 10);\n        var targetHeight = lines * lineHeight;\n        _this.content.style.height = targetHeight + 'px';\n        var totalHeight = _this.shadowChildren.offsetHeight;\n        var shadowNode = _this.shadow.firstChild;\n\n        if (totalHeight <= targetHeight) {\n          _this.setState({\n            text: text,\n            targetCount: text.length\n          });\n\n          return;\n        } // bisection\n\n\n        var len = text.length;\n        var mid = Math.ceil(len / 2);\n\n        var count = _this.bisection(targetHeight, mid, 0, len, text, shadowNode);\n\n        _this.setState({\n          text: text,\n          targetCount: count\n        });\n      }\n    }, _this.bisection = function (th, m, b, e, text, shadowNode) {\n      var suffix = '...';\n      var mid = m;\n      var end = e;\n      var begin = b;\n      shadowNode.innerHTML = text.substring(0, mid) + suffix;\n      var sh = shadowNode.offsetHeight;\n\n      if (sh <= th) {\n        shadowNode.innerHTML = text.substring(0, mid + 1) + suffix;\n        sh = shadowNode.offsetHeight;\n\n        if (sh > th || mid === begin) {\n          return mid;\n        }\n\n        begin = mid;\n\n        if (end - begin === 1) {\n          mid = 1 + begin;\n        } else {\n          mid = Math.floor((end - begin) / 2) + begin;\n        }\n\n        return _this.bisection(th, mid, begin, end, text, shadowNode);\n      }\n\n      if (mid - 1 < 0) {\n        return mid;\n      }\n\n      shadowNode.innerHTML = text.substring(0, mid - 1) + suffix;\n      sh = shadowNode.offsetHeight;\n\n      if (sh <= th) {\n        return mid - 1;\n      }\n\n      end = mid;\n      mid = Math.floor((end - begin) / 2) + begin;\n      return _this.bisection(th, mid, begin, end, text, shadowNode);\n    }, _this.handleRoot = function (n) {\n      _this.root = n;\n    }, _this.handleContent = function (n) {\n      _this.content = n;\n    }, _this.handleNode = function (n) {\n      _this.node = n;\n    }, _this.handleShadow = function (n) {\n      _this.shadow = n;\n    }, _this.handleShadowChildren = function (n) {\n      _this.shadowChildren = n;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Ellipsis, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.node) {\n        this.computeLine();\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(perProps) {\n      var lines = this.props.lines;\n\n      if (lines !== perProps.lines) {\n        this.computeLine();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames;\n\n      var _state = this.state,\n          text = _state.text,\n          targetCount = _state.targetCount;\n\n      var _props = this.props,\n          children = _props.children,\n          lines = _props.lines,\n          length = _props.length,\n          className = _props.className,\n          tooltip = _props.tooltip,\n          fullWidthRecognition = _props.fullWidthRecognition,\n          restProps = _objectWithoutProperties(_props, ['children', 'lines', 'length', 'className', 'tooltip', 'fullWidthRecognition']);\n\n      var cls = (0, _classnames2.default)(styles.ellipsis, className, (_classNames = {}, _defineProperty(_classNames, styles.lines, lines && !isSupportLineClamp), _defineProperty(_classNames, styles.lineClamp, lines && isSupportLineClamp), _classNames));\n\n      if (!lines && !length) {\n        return _react2.default.createElement('span', _extends({\n          className: cls\n        }, restProps), children);\n      } // length\n\n\n      if (!lines) {\n        return _react2.default.createElement(EllipsisText, _extends({\n          className: cls,\n          length: length,\n          text: children || '',\n          tooltip: tooltip,\n          fullWidthRecognition: fullWidthRecognition\n        }, restProps));\n      }\n\n      var id = 'antd-pro-ellipsis-' + ('' + new Date().getTime() + Math.floor(Math.random() * 100)); // support document.body.style.webkitLineClamp\n\n      if (isSupportLineClamp) {\n        var style = '#' + id + '{-webkit-line-clamp:' + lines + ';-webkit-box-orient: vertical;}';\n\n        var node = _react2.default.createElement('div', _extends({\n          id: id,\n          className: cls\n        }, restProps), _react2.default.createElement('style', null, style), children);\n\n        return getTooltip({\n          tooltip: tooltip,\n          overlayStyle: TooltipOverlayStyle,\n          title: children,\n          children: node\n        });\n      }\n\n      var childNode = _react2.default.createElement('span', {\n        ref: this.handleNode\n      }, targetCount > 0 && text.substring(0, targetCount), targetCount > 0 && targetCount < text.length && '...');\n\n      return _react2.default.createElement('div', _extends({}, restProps, {\n        ref: this.handleRoot,\n        className: cls\n      }), _react2.default.createElement('div', {\n        ref: this.handleContent\n      }, getTooltip({\n        tooltip: tooltip,\n        overlayStyle: TooltipOverlayStyle,\n        title: text,\n        children: childNode\n      }), _react2.default.createElement('div', {\n        className: styles.shadow,\n        ref: this.handleShadowChildren\n      }, children), _react2.default.createElement('div', {\n        className: styles.shadow,\n        ref: this.handleShadow\n      }, _react2.default.createElement('span', null, text))));\n    }\n  }]);\n\n  return Ellipsis;\n}(_react.Component);\n\nexports.default = Ellipsis;","map":null,"metadata":{},"sourceType":"script"}