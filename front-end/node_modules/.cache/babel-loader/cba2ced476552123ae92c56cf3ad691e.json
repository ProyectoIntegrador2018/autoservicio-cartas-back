{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isComponentClass = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Exception = require('../Exception');\n\nvar _Exception2 = _interopRequireDefault(_Exception);\n\nvar _CheckPermissions = require('./CheckPermissions');\n\nvar _CheckPermissions2 = _interopRequireDefault(_CheckPermissions);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * 默认不能访问任何页面\n * default is \"NULL\"\n */\n\n\nvar Exception403 = function Exception403() {\n  return _react2.default.createElement(_Exception2.default, {\n    type: '403'\n  });\n};\n\nvar isComponentClass = exports.isComponentClass = function isComponentClass(component) {\n  if (!component) return false;\n  var proto = Object.getPrototypeOf(component);\n  if (proto === _react2.default.Component || proto === Function.prototype) return true;\n  return isComponentClass(proto);\n}; // Determine whether the incoming component has been instantiated\n// AuthorizedRoute is already instantiated\n// Authorized  render is already instantiated, children is no instantiated\n// Secured is not instantiated\n\n\nvar checkIsInstantiation = function checkIsInstantiation(target) {\n  if (isComponentClass(target)) {\n    var Target = target;\n    return function (props) {\n      return _react2.default.createElement(Target, props);\n    };\n  }\n\n  if (_react2.default.isValidElement(target)) {\n    return function (props) {\n      return _react2.default.cloneElement(target, props);\n    };\n  }\n\n  return function () {\n    return target;\n  };\n};\n/**\n * 用于判断是否拥有权限访问此 view 权限\n * authority 支持传入 string, () => boolean | Promise\n * e.g. 'user' 只有 user 用户能访问\n * e.g. 'user,admin' user 和 admin 都能访问\n * e.g. ()=>boolean 返回true能访问,返回false不能访问\n * e.g. Promise  then 能访问   catch不能访问\n * e.g. authority support incoming string, () => boolean | Promise\n * e.g. 'user' only user user can access\n * e.g. 'user, admin' user and admin can access\n * e.g. () => boolean true to be able to visit, return false can not be accessed\n * e.g. Promise then can not access the visit to catch\n * @param {string | function | Promise} authority\n * @param {ReactNode} error 非必需参数\n */\n\n\nvar authorize = function authorize(authority, error) {\n  /**\n   * conversion into a class\n   * 防止传入字符串时找不到staticContext造成报错\n   * String parameters can cause staticContext not found error\n   */\n  var classError = false;\n\n  if (error) {\n    classError = function classError() {\n      return error;\n    };\n  }\n\n  if (!authority) {\n    throw new Error('authority is required');\n  }\n\n  return function decideAuthority(target) {\n    var component = (0, _CheckPermissions2.default)(authority, target, classError || Exception403);\n    return checkIsInstantiation(component);\n  };\n};\n\nexports.default = authorize;","map":null,"metadata":{},"sourceType":"script"}