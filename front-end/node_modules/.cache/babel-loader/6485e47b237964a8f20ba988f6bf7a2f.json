{"ast":null,"code":"import _classCallCheck from \"/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/src/views/Restablecer.js\";\nimport React, { Component } from 'react';\nimport '../App.css';\nimport { Form, Icon, Input, Button, Row, Col, Modal } from 'antd';\nimport { Redirect } from 'react-router-dom';\nimport loginImage from '../images/stte.png';\nimport logo from '../images/logo.png';\nimport API from \"../tools/API\";\nimport Notifications from \"../tools/Notifications\";\n\nvar Restablecer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Restablecer, _Component);\n\n  function Restablecer(props) {\n    var _this;\n\n    _classCallCheck(this, Restablecer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Restablecer).call(this, props));\n\n    _this.validateToken = function () {\n      _this.setState({\n        loading: true\n      });\n\n      {\n        /* Valida que el link para cambiar la contraseña aún esté activo\n        Ya que el link solo está activo por 24 hrs.\n        Si ya expiró el tiempo manda mensaje de error\n        y redirige a la página de Login*/\n      }\n      API.call('validate_password_token/', {\n        uid: _this.state.uid,\n        token: _this.state.token\n      }, function (response) {\n        if (response === 1) {} else {\n          _this.setState({\n            warning: true\n          });\n\n          Modal.warning({\n            title: 'Lo sentimos!',\n            content: 'El url no existe o ha expirado ',\n            onOk: function onOk() {\n              API.redirectTo('/login');\n            }\n          });\n        }\n\n        _this.setState({\n          loading: false\n        });\n      }, function (response) {\n        _this.setState({\n          loading: false\n        });\n      }, false);\n    };\n\n    _this.handleConfirmBlur = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        confirmDirty: _this.state.confirmDirty || !!value\n      });\n    };\n\n    _this.compareToFirstPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n      {\n        /* Método que valida si la primera contraseña es igual a la contraseña de confirmación\n        obtiene los valores de los campos y los compara\n        si hay un error muestra un mensaje que la contraseña no coincide\n        de lo contrario, se hace el cambio de contraseña*/\n      }\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('La contraseña no coincide con la introducida previamente');\n      } else {\n        callback();\n      }\n    };\n\n    _this.validateToNextPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && _this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      {\n        /* Método para cambiar la contraseña del usuario*/\n      }\n\n      _this.props.form.validateFields(function (error, values) {\n        if (!error) {\n          _this.setState({\n            loading: true\n          });\n\n          API.restCall({\n            service: 'reset_password/',\n            method: \"post\",\n            params: {\n              uid: _this.state.uid,\n              password: values.password,\n              token: _this.state.token\n            },\n            success: function success(response) {\n              {\n                /* Notificación de éxito cuando se restablece la contraseña\n                redirige a la página de Login*/\n              }\n              Notifications.openNotificationWithIcon(\"success\", \"Tu contraseña se restableció con éxito\", \"\");\n              API.logout();\n              API.redirectTo(\"/\");\n            },\n            error: function error(response) {\n              {\n                /* Notificación de error cuando no se puede restablecer la contraseña\n                redirige a la página de Login*/\n              }\n              Notifications.openNotificationWithIcon(\"success\", \"Tu contraseña se restableció con éxito\", \"\");\n              API.logout();\n              API.redirectTo(\"/\");\n            },\n            wToken: false\n          });\n        }\n      });\n    };\n\n    _this.state = {\n      uid: props.uid,\n      token: props.token,\n      confirmDirty: false,\n      loading: false,\n      warning: false,\n      redirect: false\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleConfirmBlur = _this.handleConfirmBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.compareToFirstPassword = _this.compareToFirstPassword.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateToNextPassword = _this.validateToNextPassword.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Restablecer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.validateToken();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n\n      if (this.state.redirect) {\n        return React.createElement(Redirect, {\n          to: '/login',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: 0,\n        sm: 0,\n        md: 0,\n        lg: 12,\n        xl: 14,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"login-image-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"login-image\",\n        src: loginImage,\n        alt: '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        xs: 24,\n        sm: 24,\n        md: 24,\n        lg: 12,\n        xl: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        className: \"login-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"logo-image-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"logo-image\",\n        src: logo,\n        alt: '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })), React.createElement(Form.Item, {\n        className: \"restore-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Restablecer contrase\\xF1a\")), React.createElement(Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, getFieldDecorator('password', {\n        rules: [{\n          required: true,\n          message: 'Por favor ingresa la nueva contraseña'\n        },, {\n          validator: this.validateToNextPassword\n        }]\n      })(React.createElement(Input, {\n        prefix: React.createElement(Icon, {\n          type: \"lock\",\n          style: {\n            color: 'rgba(0,0,0,.25)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }),\n        type: \"password\",\n        placeholder: \"Nueva contrase\\xF1a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, getFieldDecorator('passwordVerification', {\n        rules: [{\n          required: true,\n          message: 'Por favor ingresa la verificación de la contraseña'\n        }, {\n          validator: this.compareToFirstPassword\n        }]\n      })(React.createElement(Input, {\n        prefix: React.createElement(Icon, {\n          type: \"lock\",\n          style: {\n            color: 'rgba(0,0,0,.25)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }),\n        type: \"password\",\n        placeholder: \"Verificar contrase\\xF1a\",\n        onBlur: this.handleConfirmBlur,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        className: \"login-form-button\",\n        loading: this.state.loading,\n        disabled: this.state.loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Restablecer contrase\\xF1a\"))))));\n    }\n  }]);\n\n  return Restablecer;\n}(Component);\n\nvar WrappedNormalLoginForm = Form.create({\n  name: 'restablecer'\n})(Restablecer);\nexport default WrappedNormalLoginForm;","map":{"version":3,"sources":["/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/src/views/Restablecer.js"],"names":["React","Component","Form","Icon","Input","Button","Row","Col","Modal","Redirect","loginImage","logo","API","Notifications","Restablecer","props","validateToken","setState","loading","call","uid","state","token","response","warning","title","content","onOk","redirectTo","handleConfirmBlur","e","value","target","confirmDirty","compareToFirstPassword","rule","callback","form","getFieldValue","validateToNextPassword","validateFields","force","handleSubmit","preventDefault","error","values","restCall","service","method","params","password","success","openNotificationWithIcon","logout","wToken","redirect","bind","getFieldDecorator","rules","required","message","validator","color","WrappedNormalLoginForm","create","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\nimport {\n    Form, Icon, Input, Button, Row, Col,Modal\n  } from 'antd';\nimport {Redirect} from 'react-router-dom';\nimport loginImage from '../images/stte.png';\nimport logo from '../images/logo.png';\nimport API from \"../tools/API\";\nimport Notifications from \"../tools/Notifications\";\n\nclass Restablecer extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uid: props.uid,\n            token: props.token,\n            confirmDirty: false,\n            loading: false,\n            warning: false,\n            redirect:false\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleConfirmBlur = this.handleConfirmBlur.bind(this);\n        this.compareToFirstPassword = this.compareToFirstPassword.bind(this);\n        this.validateToNextPassword = this.validateToNextPassword.bind(this);\n    }\n\n    componentDidMount() {\n        this.validateToken();\n    }\n\n    validateToken = () => {\n        this.setState({ loading: true, });\n        {/* Valida que el link para cambiar la contraseña aún esté activo\n        Ya que el link solo está activo por 24 hrs.\n        Si ya expiró el tiempo manda mensaje de error\n        y redirige a la página de Login*/}\n        API.call('validate_password_token/',{uid: this.state.uid, token:this.state.token}, (response) => {\n            if(response === 1) {\n            } else {\n                this.setState({ warning: true });\n                Modal.warning({\n                    title: 'Lo sentimos!',\n                    content: 'El url no existe o ha expirado ',\n                    onOk:() => {API.redirectTo('/login')}\n                });\n            }\n            this.setState({ loading: false, });\n        }, (response) => {\n            this.setState({ loading: false, });\n        }, false);\n    };\n\n    handleConfirmBlur = (e) => {\n        const value = e.target.value;\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        {/* Método que valida si la primera contraseña es igual a la contraseña de confirmación\n        obtiene los valores de los campos y los compara\n        si hay un error muestra un mensaje que la contraseña no coincide\n        de lo contrario, se hace el cambio de contraseña*/}\n        if (value && value !== form.getFieldValue('password')) {\n            callback('La contraseña no coincide con la introducida previamente');\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], { force: true });\n        }\n        callback();\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault(); {/* Método para cambiar la contraseña del usuario*/}\n        this.props.form.validateFields((error, values) => {\n          if (!error) {\n                this.setState({ loading: true, });\n                API.restCall({\n                    service:'reset_password/',\n                    method: \"post\",\n                    params: {uid: this.state.uid,password:values.password, token: this.state.token},\n                    success:(response) => {\n                        {/* Notificación de éxito cuando se restablece la contraseña\n                        redirige a la página de Login*/}\n                        Notifications.openNotificationWithIcon(\"success\",\"Tu contraseña se restableció con éxito\",\"\");\n                        API.logout();\n                        API.redirectTo(\"/\")\n                    },\n                    error:(response) => {\n                        {/* Notificación de error cuando no se puede restablecer la contraseña\n                        redirige a la página de Login*/}\n                        Notifications.openNotificationWithIcon(\"success\",\"Tu contraseña se restableció con éxito\",\"\");\n                        API.logout();\n                        API.redirectTo(\"/\")\n                    },\n                    wToken: false\n                });\n            }\n        });\n      };\n\n    render() {\n\n        const { getFieldDecorator } = this.props.form;\n\n        if (this.state.redirect) {\n            return (<Redirect to={'/login'}/>);\n        }\n\n        return (\n            <div className=\"App\">\n                <Row>\n                <Col xs={0} sm={0} md={0} lg={12} xl={14}>\n                    <div className=\"login-image-container\">\n                        {/* Formulario de registro con el mensaje desplegable de cambiar contraseña*/}\n                    <img className=\"login-image\" src={loginImage} alt={''}/>\n                    </div>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12} xl={10}>\n                    <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                    <div className=\"logo-image-container\">\n                        <img className=\"logo-image\" src={logo} alt={''}/>\n                    </div>\n                    <Form.Item className=\"restore-title\">\n                        <h2>Restablecer contraseña</h2>\n                    </Form.Item>\n                    <Form.Item>\n                        {getFieldDecorator('password', {\n                        rules: [{ required: true, message: 'Por favor ingresa la nueva contraseña' }, ,\n                            {validator: this.validateToNextPassword,}],\n                        })(\n                        <Input prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"Nueva contraseña\" />\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        {getFieldDecorator('passwordVerification', {\n                        rules: [{ required: true, message: 'Por favor ingresa la verificación de la contraseña' }, {\n                            validator: this.compareToFirstPassword,\n                        }],\n                        })(\n                        <Input prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"Verificar contraseña\" onBlur={this.handleConfirmBlur}/>\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\"\n                                loading={this.state.loading} disabled={this.state.loading}>\n                        Restablecer contraseña\n                        </Button> \n                    </Form.Item>\n                    </Form>\n                </Col>\n                </Row>\n            </div>           \n        );\n    }\n}\n\nconst WrappedNormalLoginForm = Form.create({ name: 'restablecer' })(Restablecer);\nexport default WrappedNormalLoginForm;"]},"metadata":{},"sourceType":"module"}