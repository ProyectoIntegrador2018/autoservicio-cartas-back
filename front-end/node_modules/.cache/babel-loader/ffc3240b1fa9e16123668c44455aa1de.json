{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timeout = exports.credentials = exports.userAgent = exports.header = exports.json = exports.form = exports.query = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _queryString = require('query-string');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar FetchHttpClient = function () {\n  function FetchHttpClient(baseUrl) {\n    _classCallCheck(this, FetchHttpClient);\n\n    this.baseUrl = baseUrl || '';\n    this.middlewareId = 1;\n    this.middlewares = [];\n  }\n\n  _createClass(FetchHttpClient, [{\n    key: 'addMiddleware',\n    value: function addMiddleware(middleware) {\n      if (!middleware.middlewareId) {\n        middleware.middlewareId = this.middlewareId++;\n      }\n\n      this.middlewares.push(middleware);\n      return this;\n    }\n  }, {\n    key: 'removeMiddleware',\n    value: function removeMiddleware(middleware) {\n      if (!middleware.middlewareId) {\n        return this;\n      }\n\n      if (this.middlewares[middleware.middlewareId]) {\n        delete this.middlewares[middleware.middlewareId];\n      }\n\n      return this;\n    }\n  }, {\n    key: 'fetch',\n    value: function (_fetch) {\n      function fetch(_x) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }(function (path) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      if (typeof fetch !== 'function') {\n        throw new TypeError('fetch() function not available');\n      }\n\n      options = _extends({\n        headers: {}\n      }, options);\n      var url = this.resolveUrl(path, options.uriParams || {});\n      var responseMiddlewares = [];\n      var requestPromise = this.middlewares.reduce(function (promise, middleware) {\n        return promise.then(function (request) {\n          var result = middleware(request);\n\n          if (typeof result === 'function') {\n            responseMiddlewares.push(result);\n          }\n\n          return result && typeof result !== 'function' ? result : request;\n        });\n      }, Promise.resolve({\n        url: url,\n        path: path,\n        options: options\n      })).then(function (request) {\n        return fetch(request.url, request.options);\n      });\n      return requestPromise.then(function (response) {\n        return responseMiddlewares.reduce(function (promise, middleware) {\n          return promise.then(function (response) {\n            return middleware(response) || response;\n          });\n        }, Promise.resolve(response));\n      });\n    })\n  }, {\n    key: 'request',\n    value: function request(path, method) {\n      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n      return this.fetch(path, _extends({}, options, {\n        method: method\n      }));\n    }\n  }, {\n    key: 'get',\n    value: function get(path) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n      return this.request(path, 'GET', options);\n    }\n  }, {\n    key: 'post',\n    value: function post(path) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n      return this.request(path, 'POST', options);\n    }\n  }, {\n    key: 'put',\n    value: function put(path) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n      return this.request(path, 'PUT', options);\n    }\n  }, {\n    key: 'delete',\n    value: function _delete(path) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n      return this.request(path, 'DELETE', options);\n    }\n  }, {\n    key: 'patch',\n    value: function patch(path) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n      return this.request(path, 'PATCH', options);\n    }\n  }, {\n    key: 'resolveUrl',\n    value: function resolveUrl(path) {\n      var variables = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      if (path.toLowerCase().startsWith('http://') || path.toLowerCase().startsWith('https://') || path.startsWith('//')) {\n        return path;\n      }\n\n      var baseUrl = this.baseUrl.replace(/\\/+$/g, '');\n      var fullUrl = '';\n\n      if (path.startsWith('/')) {\n        var rootPos = baseUrl.indexOf('/', baseUrl.indexOf('//') + 2);\n        fullUrl = baseUrl.substr(0, rootPos === -1 ? undefined : rootPos) + path;\n      } else {\n        fullUrl = baseUrl + '/' + path;\n      }\n\n      fullUrl = fullUrl.replace(/\\{(\\w+)\\}/ig, function (match, group) {\n        if (!variables[group]) throw new Error('Unknown path variable \\'' + group + '\\'.');\n        return encodeURIComponent(variables[group]);\n      });\n      return fullUrl;\n    }\n  }]);\n\n  return FetchHttpClient;\n}();\n\nexports.default = FetchHttpClient;\n\nvar query = exports.query = function query() {\n  return function (request) {\n    if (request.options.query) {\n      var queryString = (0, _queryString.stringify)(request.options.query);\n\n      if (request.url.indexOf('?') === -1) {\n        request.url = request.url.concat('?');\n      }\n\n      if (request.url.endsWith('&') || request.url.endsWith('?')) {\n        request.url = request.url.concat(queryString);\n      } else {\n        request.url = request.url.concat('&', queryString);\n      }\n    }\n  };\n};\n\nvar form = exports.form = function form() {\n  return function (request) {\n    if (request.options.form) {\n      request.options.body = (0, _queryString.stringify)(request.options.form);\n      request.options.headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n  };\n};\n\nvar json = exports.json = function json() {\n  return function (request) {\n    if (request.options.json) {\n      request.options.body = JSON.stringify(request.options.json);\n      request.options.headers['Content-Type'] = 'application/json';\n    }\n\n    request.options.headers.Accept = 'application/json';\n    return function (response) {\n      var contentType = response.headers.get('Content-Type') || '';\n      if (contentType.indexOf('json') === -1) return response;\n      return response.json().then(function (json) {\n        return response.jsonData = json, response;\n      });\n    };\n  };\n};\n\nvar header = exports.header = function header(headers) {\n  return function (request) {\n    request.options.headers = _extends({}, request.options.headers, headers);\n  };\n};\n\nvar userAgent = exports.userAgent = function userAgent(ua) {\n  return function (request) {\n    var uaSegments = [];\n    Object.keys(ua).forEach(function (key) {\n      return uaSegments.push(key + '/' + ua[key]);\n    });\n    request.options.headers['User-Agent'] = uaSegments.join(' ');\n  };\n};\n\nvar credentials = exports.credentials = function credentials(_credentials) {\n  return function (request) {\n    request.options.credentials = _credentials;\n  };\n};\n\nvar timeout = exports.timeout = function timeout(s) {\n  return function (request) {\n    if (typeof parseInt(s, 10) !== 'number') throw new TypeError('function params not available');\n    var abort = new Promise(function (resolve, reject) {\n      return setTimeout(reject, s, 'request timeout!');\n    });\n    return Promise.race([request, abort]);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}