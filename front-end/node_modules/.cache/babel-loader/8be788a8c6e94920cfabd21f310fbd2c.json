{"ast":null,"code":"import _classCallCheck from \"/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/src/views/Procesos.js\";\nimport React, { Component } from 'react';\nimport { Icon, Button, Modal, Form, Input } from 'antd';\nimport DataTable from \"../components/DataTable\";\nimport API from \"../tools/API\";\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\n\nvar ProcesosForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProcesosForm, _Component);\n\n  function ProcesosForm(props) {\n    var _this;\n\n    _classCallCheck(this, ProcesosForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProcesosForm).call(this, props));\n\n    _this.refreshData = function () {\n      _this.setState({\n        loading: true\n      });\n\n      API.call('procesos/', [], function (response) {\n        _this.setState({\n          data: response,\n          loading: false\n        });\n      });\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (error, values) {\n        if (!error) {//console.log('Valores recibidos ', values);\n        }\n      });\n    };\n\n    _this.deleteProcs = function (rows) {\n      _this.setState({\n        loading: true\n      });\n\n      API.call('borrar-procesos/', {\n        procesos: JSON.stringify(rows)\n      }, function (response) {\n        _this.setState({\n          loading: false\n        });\n\n        _this.refreshData();\n      }, function () {\n        _this.setState({\n          loading: false\n        });\n      });\n    };\n\n    _this.state = {\n      visible: false,\n      loading: true,\n      data: []\n    };\n    return _this;\n  }\n\n  _createClass(ProcesosForm, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.refreshData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: '/proceso/nuevo',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \" \", React.createElement(Button, {\n        style: {\n          float: 'right'\n        },\n        type: \"secondary\",\n        icon: \"plus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Agregar proceso nuevo\")), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"cluster\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), \" Procesos\"), React.createElement(DataTable, {\n        data: this.state.data,\n        loading: this.state.loading,\n        deleteFunc: this.deleteProcs,\n        rowSelection: true,\n        columns: [{\n          title: 'Nombre del proceso',\n          key: 'nombre'\n        }, {\n          title: 'Pasos',\n          key: 'pasos'\n        }, {\n          title: 'Fecha de creaci√≥n',\n          key: 'fecha',\n          render: function render(text, record) {\n            return React.createElement(\"div\", {\n              style: {\n                textAlign: 'center'\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 84\n              },\n              __self: this\n            }, React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 85\n              },\n              __self: this\n            }, moment(text).format('DD-MMM-YYYY')));\n          }\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(Modal, {\n        title: \"Agregar proceso nuevo\",\n        visible: this.state.visible,\n        onCancel: function onCancel() {\n          _this2.setState({\n            visible: false\n          });\n        },\n        footer: [React.createElement(Button, {\n          key: \"back\",\n          onClick: function onClick() {\n            _this2.setState({\n              visible: false\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, \"Cancelar\"), React.createElement(Button, {\n          key: \"submit\",\n          type: \"primary\",\n          onClick: this.handleSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, \"OK\")],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Form, {\n        layout: \"horizontal\",\n        className: 'form-normal',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        label: \"Nombre del procesos\",\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, getFieldDecorator('proceso', {\n        rules: [{\n          required: true,\n          message: 'Por favor escribe un nombre para el proceso'\n        }]\n      })(React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return ProcesosForm;\n}(Component);\n\nvar Procesos = Form.create({\n  name: 'normal_login'\n})(ProcesosForm);\nexport default Procesos;","map":{"version":3,"sources":["/mnt/c/Users/oscar/Documents/autoservicio-cartas-back/front-end/src/views/Procesos.js"],"names":["React","Component","Icon","Button","Modal","Form","Input","DataTable","API","Link","moment","ProcesosForm","props","refreshData","setState","loading","call","response","data","handleSubmit","e","preventDefault","form","validateFields","error","values","deleteProcs","rows","procesos","JSON","stringify","state","visible","getFieldDecorator","float","title","key","render","text","record","textAlign","format","rules","required","message","Procesos","create","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Icon, Button, Modal, Form, Input\n} from 'antd';\nimport DataTable from \"../components/DataTable\";\nimport API from \"../tools/API\";\nimport { Link } from 'react-router-dom'\nimport moment from 'moment';\n\nclass ProcesosForm extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            visible:false,\n            loading:true,\n            data: []\n        }\n    }\n\n    refreshData = () => {\n        this.setState({loading:true});\n        API.call('procesos/',[], (response) => {\n            this.setState({data: response, loading:false});\n        });\n    };\n\n    componentWillMount() {\n        this.refreshData();\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((error, values) => {\n            if (!error) {\n                //console.log('Valores recibidos ', values);\n            }\n        });\n    };\n    /*\n    refreshData = () => {\n        this.setState({loading:true});\n        API.restCall({\n            service:'get_datos_tramite_alumno/' + this.props.id ,\n            success:(response) => {\n\n                this.setState({step: response[0].paso_actual, proceso: response[0].proceso__nombre,\n                ticket:response[0].numero_ticket, fecha1: response[0].fecha_inicio, fecha2:response[0].fecha_ultima_actualizacion,\n                n_paso:response[0].numero_paso_actual });\n                this.getPasos(response[0].proceso_id)\n                },\n            error:(response) => {\n                this.setState({loading:false});\n            }\n        })\n    };\n    */\n\n    //M√©todo que elimina los procesos de la base de datos\n    deleteProcs = (rows) => {\n        this.setState({loading:true});\n        API.call('borrar-procesos/', {procesos:JSON.stringify(rows)}, (response) => {\n\n            this.setState({ loading:false});\n            this.refreshData();\n        }, () => {this.setState({ loading:false});});\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n\n        return (\n            <div>\n                <Link to={'/proceso/nuevo'}> <Button style={{float:'right'}} type=\"secondary\" icon=\"plus\">\n                    Agregar proceso nuevo</Button></Link>\n                <h1><Icon type=\"cluster\" /> Procesos</h1>\n                    <DataTable data={this.state.data} loading={this.state.loading}\n                               deleteFunc={this.deleteProcs} rowSelection={true}\n                           columns={[\n                               {title: 'Nombre del proceso',key: 'nombre', },\n                               {title: 'Pasos',key: 'pasos',},\n                               {title: 'Fecha de creaci√≥n',key: 'fecha',\n                               render: (text, record) => (\n                                <div style={{textAlign:'center'}}>\n                                    <div>{moment(text).format('DD-MMM-YYYY')}</div>\n                                </div>\n                                ),}\n                               ]}/>\n                <Modal\n                    title=\"Agregar proceso nuevo\"\n                    visible={this.state.visible}\n                    onCancel={() => {this.setState({visible:false})}}\n                    footer={[\n                        <Button key=\"back\" onClick={() => {this.setState({visible:false})}}>Cancelar</Button>,\n                        <Button key=\"submit\" type=\"primary\"  onClick={this.handleSubmit}>\n                            OK\n                        </Button>,\n                    ]}\n                >\n                    <Form layout=\"horizontal\" className={'form-normal'}>\n                        <Form.Item label=\"Nombre del procesos\" type=\"text\">\n                            {getFieldDecorator('proceso', {\n                                rules: [{ required: true, message: 'Por favor escribe un nombre para el proceso' }],\n                            })(\n                                <Input />\n                            )}\n                        </Form.Item>\n                    </Form>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst Procesos = Form.create({ name: 'normal_login' })(ProcesosForm);\nexport default Procesos;"]},"metadata":{},"sourceType":"module"}