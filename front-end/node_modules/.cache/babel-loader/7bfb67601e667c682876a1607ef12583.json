{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkPermissions = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _PromiseRender = require('./PromiseRender');\n\nvar _PromiseRender2 = _interopRequireDefault(_PromiseRender);\n\nvar _renderAuthorize = require('./renderAuthorize');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * 通用权限检查方法\n * Common check permissions method\n * @param { 权限判定 | Permission judgment } authority\n * @param { 你的权限 | Your permission description } currentAuthority\n * @param { 通过的组件 | Passing components } target\n * @param { 未通过的组件 | no pass components } Exception\n */\n\n\nvar checkPermissions = function checkPermissions(authority, currentAuthority, target, Exception) {\n  // 没有判定权限.默认查看所有\n  // Retirement authority, return target;\n  if (!authority) {\n    return target;\n  } // 数组处理\n\n\n  if (Array.isArray(authority)) {\n    if (Array.isArray(currentAuthority)) {\n      if (currentAuthority.some(function (item) {\n        return authority.includes(item);\n      })) {\n        return target;\n      }\n    } else if (authority.includes(currentAuthority)) {\n      return target;\n    }\n\n    return Exception;\n  } // string 处理\n\n\n  if (typeof authority === 'string') {\n    if (Array.isArray(currentAuthority)) {\n      if (currentAuthority.some(function (item) {\n        return authority === item;\n      })) {\n        return target;\n      }\n    } else if (authority === currentAuthority) {\n      return target;\n    }\n\n    return Exception;\n  } // Promise 处理\n\n\n  if (authority instanceof Promise) {\n    return _react2.default.createElement(_PromiseRender2.default, {\n      ok: target,\n      error: Exception,\n      promise: authority\n    });\n  } // Function 处理\n\n\n  if (typeof authority === 'function') {\n    try {\n      var bool = authority(currentAuthority); // 函数执行后返回值是 Promise\n\n      if (bool instanceof Promise) {\n        return _react2.default.createElement(_PromiseRender2.default, {\n          ok: target,\n          error: Exception,\n          promise: bool\n        });\n      }\n\n      if (bool) {\n        return target;\n      }\n\n      return Exception;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  throw new Error('unsupported parameters');\n};\n\nexports.checkPermissions = checkPermissions;\n\nvar check = function check(authority, target, Exception) {\n  return checkPermissions(authority, _renderAuthorize.CURRENT, target, Exception);\n};\n\nexports.default = check;","map":null,"metadata":{},"sourceType":"script"}