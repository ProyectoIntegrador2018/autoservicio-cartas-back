{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _row = require('antd/lib/row');\n\nvar _row2 = _interopRequireDefault(_row);\n\nvar _button = require('antd/lib/button');\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _col = require('antd/lib/col');\n\nvar _col2 = _interopRequireDefault(_col);\n\nvar _input = require('antd/lib/input');\n\nvar _input2 = _interopRequireDefault(_input);\n\nvar _form = require('antd/lib/form');\n\nvar _form2 = _interopRequireDefault(_form);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _omit = require('omit.js');\n\nvar _omit2 = _interopRequireDefault(_omit);\n\nvar _map = require('./map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _loginContext = require('./loginContext');\n\nvar _loginContext2 = _interopRequireDefault(_loginContext);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar styles = {\n  'login': 'antd-pro-login-login',\n  'ant-tabs': 'antd-pro-login-ant-tabs',\n  'ant-tabs-bar': 'antd-pro-login-ant-tabs-bar',\n  'ant-form-item': 'antd-pro-login-ant-form-item',\n  'getCaptcha': 'antd-pro-login-getCaptcha',\n  'icon': 'antd-pro-login-icon',\n  'other': 'antd-pro-login-other',\n  'register': 'antd-pro-login-register',\n  'prefixIcon': 'antd-pro-login-prefixIcon',\n  'submit': 'antd-pro-login-submit'\n};\nvar FormItem = _form2.default.Item;\nvar WrapFormItem = (_temp = _class = function (_Component) {\n  _inherits(WrapFormItem, _Component);\n\n  function WrapFormItem(props) {\n    _classCallCheck(this, WrapFormItem);\n\n    var _this = _possibleConstructorReturn(this, (WrapFormItem.__proto__ || Object.getPrototypeOf(WrapFormItem)).call(this, props));\n\n    _this.onGetCaptcha = function () {\n      var onGetCaptcha = _this.props.onGetCaptcha;\n      var result = onGetCaptcha ? onGetCaptcha() : null;\n\n      if (result === false) {\n        return;\n      }\n\n      if (result instanceof Promise) {\n        result.then(_this.runGetCaptchaCountDown);\n      } else {\n        _this.runGetCaptchaCountDown();\n      }\n    };\n\n    _this.getFormItemOptions = function (_ref) {\n      var onChange = _ref.onChange,\n          defaultValue = _ref.defaultValue,\n          customprops = _ref.customprops,\n          rules = _ref.rules;\n      var options = {\n        rules: rules || customprops.rules\n      };\n\n      if (onChange) {\n        options.onChange = onChange;\n      }\n\n      if (defaultValue) {\n        options.initialValue = defaultValue;\n      }\n\n      return options;\n    };\n\n    _this.runGetCaptchaCountDown = function () {\n      var countDown = _this.props.countDown;\n      var count = countDown || 59;\n\n      _this.setState({\n        count: count\n      });\n\n      _this.interval = setInterval(function () {\n        count -= 1;\n\n        _this.setState({\n          count: count\n        });\n\n        if (count === 0) {\n          clearInterval(_this.interval);\n        }\n      }, 1000);\n    };\n\n    _this.state = {\n      count: 0\n    };\n    return _this;\n  }\n\n  _createClass(WrapFormItem, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          updateActive = _props.updateActive,\n          name = _props.name;\n\n      if (updateActive) {\n        updateActive(name);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var count = this.state.count;\n      var getFieldDecorator = this.props.form.getFieldDecorator; // 这么写是为了防止restProps中 带入 onChange, defaultValue, rules props\n\n      var _props2 = this.props,\n          onChange = _props2.onChange,\n          customprops = _props2.customprops,\n          defaultValue = _props2.defaultValue,\n          rules = _props2.rules,\n          name = _props2.name,\n          getCaptchaButtonText = _props2.getCaptchaButtonText,\n          getCaptchaSecondText = _props2.getCaptchaSecondText,\n          updateActive = _props2.updateActive,\n          type = _props2.type,\n          restProps = _objectWithoutProperties(_props2, ['onChange', 'customprops', 'defaultValue', 'rules', 'name', 'getCaptchaButtonText', 'getCaptchaSecondText', 'updateActive', 'type']); // get getFieldDecorator props\n\n\n      var options = this.getFormItemOptions(this.props);\n      var otherProps = restProps || {};\n\n      if (type === 'Captcha') {\n        var inputProps = (0, _omit2.default)(otherProps, ['onGetCaptcha', 'countDown']);\n        return _react2.default.createElement(FormItem, null, _react2.default.createElement(_row2.default, {\n          gutter: 8\n        }, _react2.default.createElement(_col2.default, {\n          span: 16\n        }, getFieldDecorator(name, options)(_react2.default.createElement(_input2.default, _extends({}, customprops, inputProps)))), _react2.default.createElement(_col2.default, {\n          span: 8\n        }, _react2.default.createElement(_button2.default, {\n          disabled: count,\n          className: styles.getCaptcha,\n          size: 'large',\n          onClick: this.onGetCaptcha\n        }, count ? count + ' ' + getCaptchaSecondText : getCaptchaButtonText))));\n      }\n\n      return _react2.default.createElement(FormItem, null, getFieldDecorator(name, options)(_react2.default.createElement(_input2.default, _extends({}, customprops, otherProps))));\n    }\n  }]);\n\n  return WrapFormItem;\n}(_react.Component), _class.defaultProps = {\n  getCaptchaButtonText: 'captcha',\n  getCaptchaSecondText: 'second'\n}, _temp);\nvar LoginItem = {};\nObject.keys(_map2.default).forEach(function (key) {\n  var item = _map2.default[key];\n\n  LoginItem[key] = function (props) {\n    return _react2.default.createElement(_loginContext2.default.Consumer, null, function (context) {\n      return _react2.default.createElement(WrapFormItem, _extends({\n        customprops: item.props,\n        rules: item.rules\n      }, props, {\n        type: key,\n        updateActive: context.updateActive,\n        form: context.form\n      }));\n    });\n  };\n});\nexports.default = LoginItem;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}